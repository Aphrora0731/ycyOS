this file is used to record the update of project

2020/8/12
Original mbr file
* could print a string while boosting
* written by nasm


Makefile
*create the .img file by .s file
*path of .img file has been assigned in this file.
 It will be automaticaly put in related bochs file.
 Check bochs' initialise file to know more


2020/8/13
bootsect(original mbr file)
* still print a string while boosting
* successfully load OS into memory 0x8000
* successfully transformed authority to the OS

Makefile
*put kernal in .img file

kernal.s
* when OS(process of kernal) is authorised, it now print a string

TD list:
	* find a way to write OS kernal by C programming language instead of nasm
(check)

2020/8/27
Makefile
* When applying command objcopy to elf32 file, it keep only .text segment only, and data such as char* str="string" is kept in .rodata segment in default.
 	Therefore, you should use parameter -j .text -j .rodata to put data into .img file
* You should specify instruction architechture with parameter.Such as follows:
	-m32 in gcc command.
	-m elf_i386 in ld command
	-f elf32 in nasm command before lingking .c and .asm
	
	That's because our OS running in 32-bit protect mode
	And when you apply-m32 in gcc, you've specified calling convention of your C compiler.
	In this case,we agreed calling convention as cdecl,which uses stack to pass all parameters

ycyOS.c
* Declare a function int Cprint(int len),get argument from kernal.asm by stack
* passing a pointer and a integer to assembly function print by stack(cdecl)

kernal.asm
* get argument from ycyOS.c by stack
* The actual string is stored in .rodata segment,make sure it's copied by objcopy.

2020/10/17
Makefile
*The input sector is not big enough anymore, with repurcussion that .data section wasn'tput in ysyOS.img.Maked it bigger.
*Linking problem
*gcc has a stack protection, which I've never met or used.Simply turn it of by -fno-stack-protector.

asmdriver.asm
*Included function as follows:
	print (notice the the char* argument on stack was offset with respect to ss and the actually used is with respect to ds.So I add 0x7000 to make it correct
	init_sys (set IDT and int_handlers which are included by macros.

int_handler.asm
*This file is %include by asmdriver.asm.
*This file called C function kb_int to manipulate keyboard buffer defined in interrupt.h

loader.asm
*Change the base of some global descriptors(for ds and cs) from 0x8800 to 0x0000.
*This trick could fool the ld.We specified the start address of .text in 0x8800.
*In linking stage,all address is virtual.The value is offset with respect to 0x00.
*But when it runs in our naked machine,the phisical address of a variable is DS base + offset.
*if we use the acquiescent configuration in linux,which means .text start at about 0x80480000 or 0x4000000,depends on 32-bit or 64-bit
and a variable has offset 0x1000 with respect to .text section. It's virtual address is 0x1000 + 0x8048000.
When it runs in naked machine,it's phisical adress is its offset to .text + base of .text + DS_base.
If we want the address remains same in naked machine,we need to wipe out the DS_base part,which means set DS base to zero.

2020/10/20
Basiclly finished echo function
Now my machine typing really looks like an ordinary computer

asmdriver.asm
*implement basic print format control in function print by designate the start point of ch in vedio memory

todoList
ycyOS.c
*implement a better Cprint with two paramter x,y,which designate the start row and column of string.

implement process

2020/10/21
ycyOS.c
*implement a better Cprint with two postion arguments.
